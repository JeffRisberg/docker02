/**
 * @author Jeff Risberg
 * @since 11/26/17
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.4.5"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'docker-compose'

version = '1.0'

def jarName = "docker02-all"

ext {
    slf4jVersion = '1.7.35'
    projectLombokVersion = '1.16.20'
    guiceVersion = '4.2.3'
    jettyVersion = '9.4.41.v20210516'
    jerseyVersion = '2.33'
    jacksonVersion = '2.12.4'
    hk2Version = '2.6.0'
    hibernateVersion = '4.3.11.Final'
    junitVersion = '4.13.2'
}

assemble.dependsOn shadowJar


task buildApplicationDockerImage(type: Exec) {
    executable "docker"
    args "build", "-t", "company/application", "-f", "Dockerfile.application", "."
}

task buildStorageDockerImage(type: Exec) {
    executable "docker"
    args "build", "-t", "company/storage", "-f", "Dockerfile.storage", "."
}

task buildDockerImages(type: Exec) {
    executable "echo"
    args "Build images"
}
buildDockerImages.dependsOn(buildApplicationDockerImage)
buildDockerImages.dependsOn(buildStorageDockerImage)

task cleanApplicationDockerImage(type: Exec) {
    ignoreExitValue true
    executable "docker"
    args "rmi", "company/application", "--force"
}

task cleanStorageDockerImage(type: Exec) {
    ignoreExitValue true
    executable "docker"
    args "rmi", "company/storage", "--force"
}

task cleanDockerImages(type: Exec) {
    executable "echo"
    args "Cleaned images"
}
cleanDockerImages.finalizedBy(cleanApplicationDockerImage)
cleanDockerImages.finalizedBy(cleanStorageDockerImage)


dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:slf4j-simple:$slf4jVersion"
    compile "org.projectlombok:lombok:$projectLombokVersion"

    compile 'commons-collections:commons-collections:3.2.2'
    compile 'commons-configuration:commons-configuration:1.6'

    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"

    compile "org.eclipse.jetty:jetty-server:$jettyVersion"
    compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"

    compile "org.glassfish.jersey.core:jersey-common:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"

    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"

    compile "com.squarespace.jersey2-guice:jersey2-guice-impl:1.0.6"
    compile "org.glassfish.hk2:hk2:$hk2Version"
    compile "org.glassfish.hk2:guice-bridge:$hk2Version"

    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"

    compile "org.hibernate:hibernate-core:$hibernateVersion"
    compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'

    compile 'com.zaxxer:HikariCP:2.7.4'
    compile 'mysql:mysql-connector-java:5.1.48'

    testCompile "junit:junit:$junitVersion"
}


shadowJar {
    zip64 true
    baseName = jarName
    classifier = null
    mergeServiceFiles()
    manifest {
        attributes('Implementation-Title': project.name,
                'Manifest-Version': '1.0',
                'Implementation-Version': project.version,
                'Main-Class': 'com.company.Main')
    }
    from { [project.configurations.compile] } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
